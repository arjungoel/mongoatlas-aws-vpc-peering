name: "Deploy Terraform Code using GitHub Actions"
on:
  push:
    branches: ["master", "develop"]

jobs:
  start-runner:
    name: Start self-hosted EC2 runner
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Start EC2 runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.TOKEN }}
          ec2-image-id: ami-026b57f3c383c2eec
          ec2-instance-type: t2.micro
          subnet-id: subnet-071f86be2c5a1fd9c
          security-group-id: sg-0d9a1e318694d2444
  
  do-the-job:
    name: Do the job on the runner
    needs: start-runner # required to start the main job when the runner is ready
    runs-on: ${{ needs.start-runner.outputs.label }} 
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - uses: christophebedard/tag-version-commit@v1
        with:
          token: ${{ secrets.TOKEN }}
          version_regex: 'Version: ([0-9]+\.[0-9]+\.[0-9]+)'
      - name: setup terraform
        run: |
          wget https://releases.hashicorp.com/terraform/0.14.3/terraform_0.14.3_linux_amd64.zip
          tar xzf terraform_0.14.3_linux_amd64.zip
          mv terraform /usr/local/bin/
      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check
    
    # validate the terraform code
      - name: Terraform validation
        run: terraform validate

    # Generates an execution plan for Terraform
      - name: Terraform Plan
        shell:  bash
        env:
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          MONGODBATLAS_DB_PASSWORD: ${{ secrets.MONGODBATLAS_DB_PASSWORD }}
          MONGODBATLAS_DB_USERNAME: ${{ secrets.MONGODBATLAS_DB_USERNAME }}
          MONGODBATLAS_ORGID: ${{ secrets.MONGODBATLAS_ORGID }}
          MONGODBATLAS_PRIVATE_KEY: ${{ secrets.MONGODBATLAS_PRIVATE_KEY }}
          MONGODBATLAS_PUBLIC_KEY: ${{ secrets.MONGODBATLAS_PUBLIC_KEY }}
        run: terraform plan -var="aws_access_key=$AWS_ACCESS_KEY" -var="aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" -var="mongodbatlas_public_key=$MONGODBATLAS_PUBLIC_KEY" -var="mongodbatlas_private_key=$MONGODBATLAS_PRIVATE_KEY" -var="mongodbatlas_orgid=$MONGODBATLAS_ORGID" -var="mongodbatlas_db_username=$MONGODBATLAS_DB_USERNAME" -var="mongodbatlas_db_password=$MONGODBATLAS_DB_PASSWORD"
        continue-on-error: true

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        shell: bash
        env:
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          MONGODBATLAS_DB_PASSWORD: ${{ secrets.MONGODBATLAS_DB_PASSWORD }}
          MONGODBATLAS_DB_USERNAME: ${{ secrets.MONGODBATLAS_DB_USERNAME }}
          MONGODBATLAS_ORGID: ${{ secrets.MONGODBATLAS_ORGID }}
          MONGODBATLAS_PRIVATE_KEY: ${{ secrets.MONGODBATLAS_PRIVATE_KEY }}
          MONGODBATLAS_PUBLIC_KEY: ${{ secrets.MONGODBATLAS_PUBLIC_KEY }}
        #if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false -var="aws_access_key=$AWS_ACCESS_KEY" -var="aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" -var="mongodbatlas_public_key=$MONGODBATLAS_PUBLIC_KEY" -var="mongodbatlas_private_key=$MONGODBATLAS_PRIVATE_KEY" -var="mongodbatlas_orgid=$MONGODBATLAS_ORGID" -var="mongodbatlas_db_username=$MONGODBATLAS_DB_USERNAME" -var="mongodbatlas_db_password=$MONGODBATLAS_DB_PASSWORD"
        continue-on-error: true
    
      - name: Terraform Destroy
        shell: bash
        env:
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          MONGODBATLAS_DB_PASSWORD: ${{ secrets.MONGODBATLAS_DB_PASSWORD }}
          MONGODBATLAS_DB_USERNAME: ${{ secrets.MONGODBATLAS_DB_USERNAME }}
          MONGODBATLAS_ORGID: ${{ secrets.MONGODBATLAS_ORGID }}
          MONGODBATLAS_PRIVATE_KEY: ${{ secrets.MONGODBATLAS_PRIVATE_KEY }}
          MONGODBATLAS_PUBLIC_KEY: ${{ secrets.MONGODBATLAS_PUBLIC_KEY }}
        run: terraform destroy -auto-approve -var="aws_access_key=$AWS_ACCESS_KEY" -var="aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" -var="mongodbatlas_public_key=$MONGODBATLAS_PUBLIC_KEY" -var="mongodbatlas_private_key=$MONGODBATLAS_PRIVATE_KEY" -var="mongodbatlas_orgid=$MONGODBATLAS_ORGID" -var="mongodbatlas_db_username=$MONGODBATLAS_DB_USERNAME" -var="mongodbatlas_db_password=$MONGODBATLAS_DB_PASSWORD"
        continue-on-error: true

  stop-runner:
    name: Stop self-hosted EC2 runner
    needs:
      - start-runner # required to get output from the start-runner job
      - do-the-job # required to wait when the main job is done
    runs-on: ubuntu-latest
    if: ${{ always() }} # required to stop the runner even if the error happened in the previous jobs
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Stop EC2 runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.TOKEN }}
          label: ${{ needs.start-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id }}